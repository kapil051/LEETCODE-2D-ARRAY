Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.

 

Example 1:

Input: intervals = [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlap, merge them into [1,6].
Example 2:

Input: intervals = [[1,4],[4,5]]
Output: [[1,5]]
Explanation: Intervals [1,4] and [4,5] are considered overlapping.
 

Constraints:

1 <= intervals.length <= 104
intervals[i].length == 2
0 <= starti <= endi <= 104

********************************************************APPROACH 1*********************************************************************************************

class Solution {
public:
    vector<vector<int>> merge(vector<vector<int>>& nums) {
    
    //ALWAYS KEEP TRACK OF THE LAST OF THE 2D VECTOR
    //UPDATE IT IF REQUIRED
    //ELSE PUSH NEW VECTOR TO THE ANSWER VECTOR
        
        if(nums.size()==1||nums.size()==0) return nums;
        
           vector<vector<int>> ans;
        
         sort(nums.begin(),nums.end());   
        
              ans.push_back(nums[0]);
        
           vector<int> current=ans[ans.size()-1];
        
        for(int i=1;i<nums.size();i++){
       
           if(current[1]>=nums[i][0]){
               
               current[1]=max(current[1],nums[i][1]);
               
                    ans.pop_back();
               
                 ans.push_back(current);
           } 
            
            else{
                ans.push_back(nums[i]);
                current=ans[ans.size()-1];
            
            }
            
            
        }
        
        
        return ans;
        
    }
};
